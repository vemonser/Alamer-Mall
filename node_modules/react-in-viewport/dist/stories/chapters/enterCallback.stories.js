"use strict";

exports.__esModule = true;
exports.ClassBaseComponent = ClassBaseComponent;
exports.FunctionalComponent = FunctionalComponent;
exports["default"] = void 0;

var _addonActions = require("@storybook/addon-actions");

var _omit = _interopRequireDefault(require("lodash/omit"));

var _index = _interopRequireWildcard(require("../../index"));

var _themeComponent = require("../common/themeComponent");

var _jsxRuntime = require("react/jsx-runtime");

var _excluded = ["forwardedRef", "inViewport"];

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ViewportBlock = (0, _index["default"])(_themeComponent.Block, {}, {
  disconnectOnLeave: false
});

function CustomAnchor(_ref) {
  var forwardedRef = _ref.forwardedRef,
      inViewport = _ref.inViewport,
      restProps = _objectWithoutPropertiesLoose(_ref, _excluded);

  var text = inViewport ? 'Link (in viewport)' : 'Link (not in viewport)';
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("a", _extends({
    href: "https://github.com/roderickhsiao/react-in-viewport#readme"
  }, (0, _omit["default"])(restProps, _index.customProps), {
    ref: forwardedRef,
    style: {
      padding: '20px 0'
    },
    children: text
  }));
}

var ViewportAnchor = (0, _index["default"])(CustomAnchor, {}, {
  disconnectOnLeave: false
});
var _default = {
  title: 'Enter Callback',
  component: ViewportBlock,
  decorators: [function (Story) {
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_themeComponent.PageTitle, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)(_themeComponent.Spacer, {}), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        style: {
          padding: '20px',
          maxWidth: '400px'
        },
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Story, {})
      })]
    });
  }]
};
exports["default"] = _default;

function ClassBaseComponent() {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ViewportBlock, {
    className: "card",
    onEnterViewport: function onEnterViewport() {
      return (0, _addonActions.action)('callback')('onEnterViewport');
    },
    onLeaveViewport: function onLeaveViewport() {
      return (0, _addonActions.action)('callback')('onLeaveViewport');
    }
  });
}

function FunctionalComponent() {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(ViewportAnchor, {
    onEnterViewport: function onEnterViewport() {
      return (0, _addonActions.action)('callback')('onEnterViewport');
    },
    onLeaveViewport: function onLeaveViewport() {
      return (0, _addonActions.action)('callback')('onLeaveViewport');
    }
  });
}