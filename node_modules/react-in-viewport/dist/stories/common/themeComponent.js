"use strict";

exports.__esModule = true;
exports.Block = Block;
exports.PageTitle = exports.Card = void 0;
exports.Spacer = Spacer;

var _react = _interopRequireWildcard(require("react"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var PageTitle = /*#__PURE__*/(0, _react.memo)(function (_ref) {
  var _ref$title = _ref.title,
      title = _ref$title === void 0 ? 'React In Viewport' : _ref$title,
      _ref$description = _ref.description,
      description = _ref$description === void 0 ? 'Wrapper component to detect if the component is in viewport using Intersection Observer API' : _ref$description;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: "page__title",
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)("h1", {
      className: "page__title-main",
      children: [title, /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
        className: "github mui-icon",
        href: "https://github.com/roderickhsiao/react-in-viewport",
        target: "_blank",
        rel: "noopener noreferrer",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
          style: {
            visibility: 'hidden'
          },
          children: "Github"
        })
      })]
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("p", {
      className: "page__title-desc",
      children: description
    })]
  });
});
exports.PageTitle = PageTitle;
PageTitle.displayName = 'PageTitle';

var Card = /*#__PURE__*/function (_React$PureComponent) {
  _inheritsLoose(Card, _React$PureComponent);

  function Card() {
    return _React$PureComponent.apply(this, arguments) || this;
  }

  var _proto = Card.prototype;

  _proto.render = function render() {
    var _this$props = this.props,
        titleText = _this$props.titleText,
        contentNode = _this$props.contentNode,
        forwardedRef = _this$props.forwardedRef;
    return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "card",
      ref: forwardedRef,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "card__head",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
          className: "card__title",
          children: titleText
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "card__conent",
        children: contentNode
      })]
    });
  };

  return Card;
}(_react["default"].PureComponent);

exports.Card = Card;
Card.displayName = 'Card';

function Block(props) {
  var inViewport = props.inViewport,
      enterCount = props.enterCount,
      leaveCount = props.leaveCount,
      forwardedRef = props.forwardedRef;
  var color = inViewport ? '#217ac0' : '#ff9800';
  var text = inViewport ? 'In viewport' : 'Not in viewport';
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Card, {
    titleText: text,
    contentNode: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: forwardedRef,
      title: "Enter viewport " + enterCount + " times, leave viewport " + leaveCount + " times",
      style: {
        width: '100%',
        height: '300px',
        background: color,
        transitionDuration: '1s'
      }
    })
  });
}

Block.displayName = 'Block';

function Spacer() {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    style: {
      height: '100vh',
      padding: '20px'
    },
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("p", {
      children: ["Scroll down to make component in viewport", ' ', /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
        role: "img",
        "aria-label": "down",
        children: "\uD83D\uDC47"
      }), ' ']
    })
  });
}

Spacer.displayName = Spacer;