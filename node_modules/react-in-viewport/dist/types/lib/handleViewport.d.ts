/// <reference types="react" />
import hoistNonReactStatic from 'hoist-non-react-statics';
import type { Config, Props, Options } from './types';
declare type InjectedProps = {
    enterCount: number;
    inViewport: boolean;
    leaveCount: number;
};
declare type OmittedProps = 'onEnterViewport' | 'onLeaveViewport';
declare type RestPropsRef = Omit<Props, OmittedProps>;
declare function handleViewport<P extends Props>(TargetComponent: React.ElementType | React.ComponentClass<P>, options?: Options, config?: Config): {
    ({ onEnterViewport, onLeaveViewport, ...restProps }: {
        [x: string]: any;
        onEnterViewport?: () => void;
        onLeaveViewport?: () => void;
    }): JSX.Element;
    displayName: string;
} & hoistNonReactStatic.NonReactStatics<import("react").ForwardRefExoticComponent<Pick<InjectedProps & {
    forwardedRef?: import("react").ForwardedRef<any>;
} & RestPropsRef, string | number> & import("react").RefAttributes<any>>, {}>;
export default handleViewport;
