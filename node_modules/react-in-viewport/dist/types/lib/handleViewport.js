"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const hoist_non_react_statics_1 = __importDefault(require("hoist-non-react-statics"));
const useInViewport_1 = __importDefault(require("./useInViewport"));
const constants_1 = require("./constants");
const isFunctionalComponent = (Component) => {
    return (typeof Component === 'function'
        && !(Component.prototype && Component.prototype.render));
};
const isReactComponent = (Component) => {
    return Component.prototype && Component.prototype.isReactComponent;
};
function handleViewport(TargetComponent, options = constants_1.defaultOptions, config = constants_1.defaultConfig) {
    const ForwardedRefComponent = (0, react_1.forwardRef)((props, ref) => {
        const refProps = {
            forwardedRef: ref,
            // pass both ref/forwardedRef for class component for backward compatibility
            ...(isReactComponent(TargetComponent)
                && !isFunctionalComponent(TargetComponent)
                ? {
                    ref,
                }
                : {}),
        };
        return ((0, jsx_runtime_1.jsx)(TargetComponent, { ...props, ...refProps }));
    });
    function InViewport({ onEnterViewport = constants_1.noop, onLeaveViewport = constants_1.noop, ...restProps }) {
        const node = (0, react_1.useRef)();
        const { inViewport, enterCount, leaveCount } = (0, useInViewport_1.default)(node, options, config, {
            onEnterViewport,
            onLeaveViewport,
        });
        const injectedProps = {
            inViewport,
            enterCount,
            leaveCount,
        };
        return ((0, jsx_runtime_1.jsx)(ForwardedRefComponent, { ...restProps, ...injectedProps, ref: node }));
    }
    const name = TargetComponent.displayName
        || TargetComponent.name
        || 'Component';
    InViewport.displayName = `handleViewport(${name})`;
    return (0, hoist_non_react_statics_1.default)(InViewport, ForwardedRefComponent);
}
exports.default = handleViewport;
